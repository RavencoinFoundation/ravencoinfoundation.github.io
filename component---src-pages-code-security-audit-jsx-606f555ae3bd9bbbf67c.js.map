{"version":3,"sources":["webpack:///./src/pages/code-security-audit.jsx"],"names":["StyledCodeSecurityAudit","styled","div","theme","screens","tablet","laptop","CodeSecurityAudit","useState","auditData","setAuditData","isLoading","setIsLoading","useEffect","a","fetch","response","json","responseData","cleanAuditData","filter","file","getFileExtension","name","fetchData","map","key","sha","href","download_url"],"mappings":"oOAOMA,EAA0BC,IAAOC,IAAV,+FAAGD,CAAH,qEAENE,IAAMC,QAAQC,OAEdF,IAAMC,QAAQE,QA6CtBC,UAzCf,WAA8B,IAAD,EACOC,mBAAS,IAApCC,EADoB,KACTC,EADS,OAEOF,oBAAS,GAApCG,EAFoB,KAETC,EAFS,KAmB3B,OAfAC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACyBC,MACrB,6GAFJ,cACQC,EADR,gBAI6BA,EAASC,OAJtC,OAIQC,EAJR,OAKEN,GAAa,GACPO,EAAiBD,EAAaE,QAClC,SAACC,GAAD,MAA0C,QAAhCC,YAAiBD,EAAKE,SAElCb,EAAaS,GATf,4CADc,uBAAC,WAAD,wBAYdK,KACC,IAGD,kBAAC,IAAD,KACE,kBAACxB,EAAD,KACE,kBAAC,IAAD,KACE,mDACCW,EACC,yCAEA,4BACGF,EAAUgB,KAAI,SAACJ,GAAD,OACb,wBAAIK,IAAKL,EAAKM,KACZ,uBAAGC,KAAMP,EAAKQ,cAAeR,EAAKE","file":"component---src-pages-code-security-audit-jsx-606f555ae3bd9bbbf67c.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Container } from \"../components/common/Container\";\nimport Layout from \"../components/common/Layout\";\nimport getFileExtension from \"../utils/getFileExtension\";\nimport theme from \"../utils/theme\";\n\nconst StyledCodeSecurityAudit = styled.div`\n  min-height: 50vh;\n  @media (min-width: ${theme.screens.tablet}) {\n  }\n  @media (min-width: ${theme.screens.laptop}) {\n  }\n`;\n\nfunction CodeSecurityAudit() {\n  const [auditData, setAuditData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\n        \"https://api.github.com/repos/RavencoinFoundation/ravencoinfoundation.github.io/contents/CodeSecurityAudit\"\n      );\n      const responseData = await response.json();\n      setIsLoading(false);\n      const cleanAuditData = responseData.filter(\n        (file) => getFileExtension(file.name) === \"pdf\"\n      );\n      setAuditData(cleanAuditData);\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <Layout>\n      <StyledCodeSecurityAudit>\n        <Container>\n          <h2>Code Security Audit</h2>\n          {isLoading ? (\n            <p>Loading...</p>\n          ) : (\n            <ul>\n              {auditData.map((file) => (\n                <li key={file.sha}>\n                  <a href={file.download_url}>{file.name}</a>\n                </li>\n              ))}\n            </ul>\n          )}\n        </Container>\n      </StyledCodeSecurityAudit>\n    </Layout>\n  );\n}\n\nexport default CodeSecurityAudit;\n"],"sourceRoot":""}